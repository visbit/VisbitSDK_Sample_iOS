// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Gloss;
@import Foundation;
@import UIKit;
@import CoreGraphics;
#endif

#import <VideoPlayer_iOS_Native/VideoPlayer_iOS_Native.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native13CommonPayload")
@interface CommonPayload : NSObject
- (NSDictionary<NSString *, id> * _Nullable)toJSON SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native7Context")
@interface Context : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native9DataUsage")
@interface DataUsage : CommonPayload
- (NSDictionary<NSString *, id> * _Nullable)toJSON SWIFT_WARN_UNUSED_RESULT;
- (void)updateTileBitrateList:(NSArray<NSString *> * _Nonnull)resolutions :(NSArray<NSArray<NSNumber *> *> * _Nonnull)highresTileBitrateList;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native11DownloadJob")
@interface DownloadJob : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DOWNLOAD_CHUNK_SIZE;)
+ (NSInteger)DOWNLOAD_CHUNK_SIZE SWIFT_WARN_UNUSED_RESULT;
- (void)cancelWithDeleteFile:(BOOL)deleteFile;
- (void)onRun;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, DownloadError) {
  DownloadErrorNO_ERROR = 0,
  DownloadErrorUSER_CANCELLED = 1,
  DownloadErrorFILE_SIZE_MISMATCH = 2,
  DownloadErrorFILE_CORRUPTED = 3,
  DownloadErrorINVALID_RESPONSE = 4,
  DownloadErrorINVALID_VIDEOID = 5,
  DownloadErrorNETWORK_FAILED = 6,
  DownloadErrorINTERNAL = 7,
  DownloadErrorNOT_DOWNLOADABLE = 8,
  DownloadErrorNOT_PUBLISHED = 9,
  DownloadErrorNOT_EXIST = 10,
};


SWIFT_CLASS_NAMED("VideoInfo")
@interface VideoInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull videoId;
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
@property (nonatomic) BOOL isStereo;
@property (nonatomic, copy) NSString * _Nonnull md5Checksum;
@property (nonatomic) uint64_t length;
@property (nonatomic, copy) NSString * _Nonnull resolution;
@property (nonatomic) double videoLastModified;
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nullable)toJSON SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum State : NSInteger;

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native15DownloadManager")
@interface DownloadManager : NSObject
+ (DownloadManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)refreshList;
- (NSURL * _Nonnull)destinationFile:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)localFileExist:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VideoInfo *> * _Nonnull)getLocalFileList SWIFT_WARN_UNUSED_RESULT;
- (void)download:(NSString * _Nonnull)videoId;
- (void)pause:(NSString * _Nonnull)videoId;
- (void)cancel:(NSString * _Nonnull)videoId;
- (enum State)getDownloadState:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)chooseOptimalResolutionWithWidths:(NSArray<NSNumber *> * _Nonnull)widths :(NSArray<NSNumber *> * _Nonnull)height SWIFT_WARN_UNUSED_RESULT;
- (void)onRun:(NSString * _Nonnull)videoId :(VideoInfo * _Nonnull)info;
- (void)onUpdateWithVideoId:(NSString * _Nonnull)videoId :(uint64_t)bytesRead :(uint64_t)contentLength;
- (void)onCompleteWithVideoId:(NSString * _Nonnull)videoId :(NSString * _Nonnull)destFile;
- (void)onFail:(NSString * _Nonnull)videoId :(enum DownloadError)errorCode :(NSString * _Nonnull)errorMessage;
- (int64_t)getDownloadedBytes:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (int64_t)getFileTotalBytes:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (enum DownloadError)getDownloadVideoErrorCode:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDownloadVideoErrorMessage:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeLocalFile:(NSString * _Nonnull)videoId SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, State) {
  StateNONE = 0,
  StatePENDING = 1,
  StateDOWNLOADING = 2,
  StatePAUSED = 3,
  StateFAIL = 4,
  StateCOMPLETE = 5,
  StateCANCELLED = 6,
};


@interface NSFileManager (SWIFT_EXTENSION(VideoPlayer_iOS_Native))
@end

@class TaskResponse;

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native17LoadVideoListTask")
@interface LoadVideoListTask : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DEFAULT_PAGE_COUNT;)
+ (NSInteger)DEFAULT_PAGE_COUNT SWIFT_WARN_UNUSED_RESULT;
- (void)startLoadingAt:(NSInteger)startPosition onCompletion:(void (^ _Nonnull)(TaskResponse * _Nullable))callback;
- (void)startLoadingAt:(NSInteger)startPosition forMaximum:(NSInteger)pageCount onCompletion:(void (^ _Nonnull)(TaskResponse * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class VideoModel;

/// The type Task response.
SWIFT_CLASS("_TtCC22VideoPlayer_iOS_Native17LoadVideoListTask12TaskResponse")
@interface TaskResponse : NSObject
@property (nonatomic, readonly) NSInteger startPosition;
- (NSArray<VideoModel *> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native17NetworkJobManager")
@interface NetworkJobManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL LOG_NETWORK_TRAFFIC;)
+ (BOOL)LOG_NETWORK_TRAFFIC SWIFT_WARN_UNUSED_RESULT;
+ (NetworkJobManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVideoMetadataUri:(NSString * _Nonnull)videoId :(BOOL)preview SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nonnull)getVideoModelUri:(NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nonnull)getVideoM3u8UriWithVideoId:(NSString * _Nonnull)videoId scheme:(NSString * _Nonnull)scheme previewToken:(NSString * _Nullable)previewToken SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getScheme SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVideoHostedDomain SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalHostedServer SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDebugServerOverride SWIFT_WARN_UNUSED_RESULT;
- (void)reportSessionExpired;
- (NSString * _Nonnull)getSessionKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PlayerErrorType) {
  PlayerErrorTypeInvalidVideoError = 0,
  PlayerErrorTypeNoLocalFileError = 1,
};

typedef SWIFT_ENUM(NSInteger, ServerError) {
  ServerErrorNoError = 0,
  ServerErrorInternalErrorCode = 1000,
  ServerErrorUnknownErrorCode = 1500,
  ServerErrorVideoIsNotDownloadableErrorCode = 1501,
  ServerErrorVideoIsNotPublishedErrorCode = 1502,
  ServerErrorVideoDoesNotExistsErrorCode = 1503,
  ServerErrorAppNotFoundErrorCode = 1511,
  ServerErrorCannotParseJSONBodyErrorCode = 1514,
  ServerErrorSessionExpired = 1515,
  ServerErrorIncompatibleSDKVersionErrorCode = 1541,
};


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native6Sphere")
@interface Sphere : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol StreamManagerListener;

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native13StreamManager")
@interface StreamManager : NSObject
+ (void)registerWithListener:(id <StreamManagerListener> _Nonnull)listener;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP22VideoPlayer_iOS_Native21StreamManagerListener_")
@protocol StreamManagerListener
/// Called when the stream manager failed to register
/// Registration failure is a fatal error. The SDK will not function correctly if registration
/// failed.
- (void)onRegistrationSucceed;
/// Called when the stream manager failed to register
/// Registration failure is a fatal error. The SDK will not function correctly if registration
/// failed.
- (void)onRegistrationFailedWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage;
@end

@class NSCoder;

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native12ToggleButton")
@interface ToggleButton : UIButton
@property (nonatomic, copy) NSString * _Nullable onText;
@property (nonatomic, copy) NSString * _Nullable offText;
@property (nonatomic) BOOL on;
@property (nonatomic, readonly) BOOL off;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIColor (SWIFT_EXTENSION(VideoPlayer_iOS_Native))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull vb_divider_gray;)
+ (UIColor * _Nonnull)vb_divider_gray SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithHex:(NSUInteger)hex;
@end


@interface UIFont (SWIFT_EXTENSION(VideoPlayer_iOS_Native))
+ (UIFont * _Nonnull)defaultFontLight:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nonnull)defaultFontMedium:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(VideoPlayer_iOS_Native))
@end

@class NSBundle;

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native23VBMoviePlayerController")
@interface VBMoviePlayerController : VBMoviePlayerControllerBase
@property (nonatomic) BOOL vrModeEnabled;
- (nonnull instancetype)initWithVideoModel:(VideoModel * _Nonnull)videoModel offlineMode:(BOOL)offlineMode;
- (nonnull instancetype)initWithVideoID:(NSString * _Nonnull)videoID duration:(CGFloat)duration offlineMode:(BOOL)offlineMode previewToken:(NSString * _Nonnull)previewToken OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)onVideoMetadataLoaded;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)onPlayError:(enum PlayerErrorType)errorType errorMessage:(NSString * _Null_unspecified)errorMessage;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)onCloseTapped;
- (void)play;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface VBMoviePlayerController (SWIFT_EXTENSION(VideoPlayer_iOS_Native)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end

@class UITableView;
@class UITableViewCell;

@interface VBMoviePlayerController (SWIFT_EXTENSION(VideoPlayer_iOS_Native)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface VBMoviePlayerController (SWIFT_EXTENSION(VideoPlayer_iOS_Native))
- (void)onBack;
@end


@interface VBMoviePlayerController (SWIFT_EXTENSION(VideoPlayer_iOS_Native)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP22VideoPlayer_iOS_Native16VbPlayerListener_")
@protocol VbPlayerListener
- (void)onFrameDecoded:(NSInteger)presentationTimeMs tileInfo:(NSDictionary<NSNumber *, NSNumber *> * _Nonnull)tileInfo;
- (void)onVideoEnded;
@end

@class VBVideoAVPlayer;
@protocol VbMixedPlayerListener;

SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native13VbMixedPlayer")
@interface VbMixedPlayer : NSObject <VbPlayerListener>
@property (nonatomic, strong) VBVideoAVPlayer * _Nullable player;
- (nonnull instancetype)initWithVideoID:(NSString * _Nonnull)videoID videoURL:(NSURL * _Nonnull)videoURL contentType:(NSInteger)contentType listener:(id <VbMixedPlayerListener> _Nonnull)listener;
/// Construct a mixedPlayer with a given url. a mixedPlayer in charge of all
/// logic for the playing machine. It is all what an activity needs to play video.
/// param contentType:     TYPE_HSL or TYPE_VISBIT_CLOUD.
/// param context:         Passed from activity
/// param applicationName: Passed from activity
/// param videoUrl:        m3u8 for TYPE_HSL, or .json for TYPE_VISBIT_CLOUD
/// param listener:        Passed from activity
- (nonnull instancetype)init:(NSInteger)contentType :(NSString * _Nonnull)videoId :(NSString * _Nonnull)videoUrl :(NSInteger)playerPosition :(BOOL)playWhenReady :(NSString * _Nonnull)applicationName :(Context * _Nonnull)context :(id <VbMixedPlayerListener> _Nullable)listener :(BOOL)fromLocal OBJC_DESIGNATED_INITIALIZER;
- (BOOL)getPlayWhenReady SWIFT_WARN_UNUSED_RESULT;
- (void)seek:(double)toTime;
- (NSArray<NSString *> * _Nonnull)getResolutions SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getCurrentPosition SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)stop;
- (void)onFinishFrame;
- (void)onFrameDecoded:(NSInteger)presentationTimeMs tileInfo:(NSDictionary<NSNumber *, NSNumber *> * _Nonnull)tileInfo;
- (BOOL)isVideoStereo SWIFT_WARN_UNUSED_RESULT;
- (void)onVideoEnded;
- (void)onPlayErrorWithErrorType:(enum PlayerErrorType)errorType errorMessage:(NSString * _Nonnull)errorMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol VbMixedPlayerDelegate;

@interface VbMixedPlayer (SWIFT_EXTENSION(VideoPlayer_iOS_Native))
- (void)loadWithPlayWhenReady:(BOOL)playWhenReady position:(double)position callback:(void (^ _Nonnull)(BOOL))callback;
/// Play a given playlist (.m3u8)
- (void)load:(NSURL * _Nonnull)playlist audioURL:(NSURL * _Nullable)audioURL playWhenReady:(BOOL)playWhenReady position:(double)position callback:(void (^ _Nonnull)(BOOL))callback;
- (void)play;
- (void)pause;
- (void)setPlayerDelegate:(id <VbMixedPlayerDelegate> _Nonnull)delegate;
- (BOOL)setResolution:(NSString * _Nonnull)resolution;
@end


SWIFT_PROTOCOL("_TtP22VideoPlayer_iOS_Native21VbMixedPlayerDelegate_")
@protocol VbMixedPlayerDelegate
- (void)onPlaylistCreated:(NSURL * _Nonnull)playlist;
- (void)onVideoEnded;
- (void)onVideoMetadataLoaded;
- (void)onPlayError:(enum PlayerErrorType)errorType errorMessage:(NSString * _Nonnull)errorMessage;
@end

@class VbPlayerMetadata;

SWIFT_PROTOCOL("_TtP22VideoPlayer_iOS_Native21VbMixedPlayerListener_")
@protocol VbMixedPlayerListener
- (void)onMetadataRead:(NSArray<Sphere *> * _Nonnull)spheres :(VbPlayerMetadata * _Nonnull)commonMetadata;
@optional
- (void)onStateChangedWithPlayWhenReady:(BOOL)playWhenReady :(NSInteger)playbackState;
- (void)onVideoSizeChangedWithWidth:(NSInteger)width :(NSInteger)height :(NSInteger)unappliedRotationDegrees :(float)pixelWidthAspectRatio;
@end



SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native16VbPlayerMetadata")
@interface VbPlayerMetadata : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
- (BOOL)tileIsLeftAndRightWithTileIndex:(NSInteger)tileIndex SWIFT_WARN_UNUSED_RESULT;
- (float)getAlphaBlendRatio SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getVideoId SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getAccountId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSArray<NSNumber *> *> * _Nullable)getAllTileBitrateList SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getTotalHighResTiles SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getActiveHighResTiles SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)getResolutions SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getCryptoKey SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getVideoMimeType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSecureCodec SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStereo SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldUseAlphaBlending SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDownloadable SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getGop SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAudio SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVideoDuration SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getAudioDuration SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalFile SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVersion SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getShiftCount SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getMaxWidth SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toString SWIFT_WARN_UNUSED_RESULT;
- (void)setLocalFile;
- (void)setVideoId:(NSString * _Nonnull)videoId;
- (void)setHasAudio:(BOOL)hasAudio;
- (void)setHasVideo:(BOOL)hasVideo;
- (void)setStereo:(BOOL)stereo;
- (void)setVideoMimeType:(NSString * _Nonnull)videoMimeType;
- (void)setVideoDuration:(NSInteger)videoDuration;
- (void)setAudioDuration:(NSInteger)audioDuration;
@end


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native13VideoMetaData")
@interface VideoMetaData : NSObject
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithLocalFileUrl:(NSURL * _Nonnull)localFileUrl videoId:(NSString * _Nonnull)videoId OBJC_DESIGNATED_INITIALIZER;
- (NSURL * _Nonnull)getLocalFileUrl SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAccountId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC22VideoPlayer_iOS_Native10VideoModel")
@interface VideoModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable Author;
@property (nonatomic, readonly, copy) NSString * _Nullable State;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, copy) NSString * _Nonnull previewToken;
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json OBJC_DESIGNATED_INITIALIZER;
/// Get the video content ID, which is required by the VbPlayerActivity to play the video
/// @return the videoID
- (NSString * _Nonnull)contentId SWIFT_WARN_UNUSED_RESULT;
/// Get the video length in the format of “HH:mm:ss”
/// @return the duration
- (NSString * _Nonnull)duration SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)durationFloat SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)author SWIFT_WARN_UNUSED_RESULT;
- (BOOL)downloadable SWIFT_WARN_UNUSED_RESULT;
/// Get the video resolution
/// @return the resolution
- (NSString * _Nonnull)resolution SWIFT_WARN_UNUSED_RESULT;
/// Get the thumbnail URI
/// @return the thumbnail URL
- (NSURL * _Nonnull)thumbnailUri SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)accountLogoUri SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
